{"ast":null,"code":"import _objectSpread from \"/Users/ashish/Documents/kanbananza/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { lists as defaultLists } from '../normalized-state';\nimport set from 'lodash/fp/set';\n\nconst listsReducer = (lists = defaultLists, action) => {\n  console.log(lists, action);\n\n  if (action.type === 'REMOVE_CARD') {\n    const _action$payload = action.payload,\n          listId = _action$payload.listId,\n          card = _action$payload.card;\n    const cardId = card.id;\n    const newCardObj = {\n      cardId: {}\n    };\n    /* const newCards = { ...backlog.cards, [cardId]: card };\n    const cardIds = [...backlog.cardIds, card.id];\n    const list = {\n      cards: [...backlog.list.cards, card],\n      id: backlog.list.id,\n      title: backlog.list.title,\n    }; */\n\n    let cards = lists.entities[listId].cards.filter(cardId => cardId !== card.id);\n    lists = set(['entities', listId, 'cards'], cards, lists);\n    console.log(lists);\n    return lists;\n    return {\n      cards: newCards,\n      cardIds: cardIds,\n      list: list\n    };\n  }\n\n  if (action.type === 'CARD_CREATE') {\n    const _action$payload2 = action.payload,\n          cardId = _action$payload2.cardId,\n          listId = _action$payload2.listId;\n    const cards = lists.entities[listId].cards.concat(cardId);\n    return set(['entities', listId, 'cards'], cards, lists);\n  }\n\n  if (action.type === 'MOVE_CARD_LIST') {\n    const _action$payload3 = action.payload,\n          card = _action$payload3.card,\n          newListId = _action$payload3.newListId,\n          oldListId = _action$payload3.oldListId;\n    console.log('new lsit id', newListId);\n    debugger;\n    let cards = lists.entities[newListId].cards.concat(card.id);\n    let newList = set(['entities', newListId, 'cards'], cards, lists);\n    cards = lists.entities[oldListId].cards.filter(cardId => cardId !== card.id);\n    newList = set(['entities', oldListId, 'cards'], cards, newList);\n    console.log(newList);\n    return newList;\n    /* lists.entities[newListId].cards = [\n      ...lists.entities[newListId].cards,\n      card.id,\n    ];\n    return {\n      entities: { ...lists.entities },\n      ids: [...lists.ids],\n    }; */\n  }\n\n  if (action.type === 'LIST_CREATE') {\n    const _action$payload4 = action.payload,\n          list = _action$payload4.list,\n          listId = _action$payload4.listId;\n    return {\n      entities: _objectSpread({}, lists.entities, {\n        [listId]: list\n      }),\n      ids: [...lists.ids, listId]\n    };\n  }\n\n  return lists;\n};\n\nexport default listsReducer;","map":{"version":3,"sources":["/Users/ashish/Documents/kanbananza/src/reducers/list-reducer.js"],"names":["lists","defaultLists","set","listsReducer","action","console","log","type","payload","listId","card","cardId","id","newCardObj","cards","entities","filter","newCards","cardIds","list","concat","newListId","oldListId","newList","ids"],"mappings":"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","sourcesContent":["import { lists as defaultLists } from '../normalized-state';\nimport set from 'lodash/fp/set';\n\nconst listsReducer = (lists = defaultLists, action) => {\n  console.log(lists, action);\n  if (action.type === 'REMOVE_CARD') {\n    const { listId, card } = action.payload;\n    const cardId = card.id;\n    const newCardObj = { cardId: {} };\n    /* const newCards = { ...backlog.cards, [cardId]: card };\n    const cardIds = [...backlog.cardIds, card.id];\n    const list = {\n      cards: [...backlog.list.cards, card],\n      id: backlog.list.id,\n      title: backlog.list.title,\n    }; */\n    let cards = lists.entities[listId].cards.filter(\n      cardId => cardId !== card.id,\n    );\n    lists = set(['entities', listId, 'cards'], cards, lists);\n    console.log(lists);\n    return lists;\n\n    return {\n      cards: newCards,\n      cardIds: cardIds,\n      list: list,\n    };\n  }\n  if (action.type === 'CARD_CREATE') {\n    const { cardId, listId } = action.payload;\n    const cards = lists.entities[listId].cards.concat(cardId);\n    return set(['entities', listId, 'cards'], cards, lists);\n  }\n  if (action.type === 'MOVE_CARD_LIST') {\n    const { card, newListId, oldListId } = action.payload;\n    console.log('new lsit id', newListId);\n    debugger;\n    let cards = lists.entities[newListId].cards.concat(card.id);\n    let newList = set(['entities', newListId, 'cards'], cards, lists);\n    cards = lists.entities[oldListId].cards.filter(\n      cardId => cardId !== card.id,\n    );\n    newList = set(['entities', oldListId, 'cards'], cards, newList);\n    console.log(newList);\n    return newList;\n    /* lists.entities[newListId].cards = [\n      ...lists.entities[newListId].cards,\n      card.id,\n    ];\n    return {\n      entities: { ...lists.entities },\n      ids: [...lists.ids],\n    }; */\n  }\n  if (action.type === 'LIST_CREATE') {\n    const { list, listId } = action.payload;\n    return {\n      entities: { ...lists.entities, [listId]: list },\n      ids: [...lists.ids, listId],\n    };\n  }\n  return lists;\n};\n\nexport default listsReducer;\n"]},"metadata":{},"sourceType":"module"}