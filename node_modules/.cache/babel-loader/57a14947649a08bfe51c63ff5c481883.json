{"ast":null,"code":"import { connect } from 'react-redux';\nimport { denormalize, schema } from 'normalizr';\nimport CardAssignment from '../components/CardAssignment';\n\nconst mapStateToProps = (state, ownProps) => {\n  const user = new schema.Entity('users');\n  const mySchema = {\n    users: [user]\n  };\n  const denormalizedUsers = denormalize({\n    users: state.users.ids\n  }, mySchema, {\n    users: state.users.entities\n  });\n  return {\n    user: state.users.entities[state.cards.entities[ownProps.cardId].assignedTo || state.backlog.list.cards[ownProps.cardId].assignedTo],\n    card: state.cards.entities[ownProps.cardId] || state.backlog.list.cards[ownProps.cardId],\n    users: denormalizedUsers.users\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    assignCardToUser(cardId, userId) {\n      dispatch({\n        type: 'MOVE_CARD',\n        payload: {\n          userId,\n          cardId\n        }\n      });\n    }\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardAssignment);","map":{"version":3,"sources":["/Users/ashish/Documents/kanbananza/src/containers/CardAssignmentContainer.js"],"names":["connect","denormalize","schema","CardAssignment","mapStateToProps","state","ownProps","user","Entity","mySchema","users","denormalizedUsers","ids","entities","cards","cardId","assignedTo","backlog","list","card","mapDispatchToProps","dispatch","assignCardToUser","userId","type","payload"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,EAAsBC,MAAtB,QAAoC,WAApC;AACA,OAAOC,cAAP,MAA2B,8BAA3B;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,QAAMC,IAAI,GAAG,IAAIL,MAAM,CAACM,MAAX,CAAkB,OAAlB,CAAb;AACA,QAAMC,QAAQ,GAAG;AAAEC,IAAAA,KAAK,EAAE,CAACH,IAAD;AAAT,GAAjB;AACA,QAAMI,iBAAiB,GAAGV,WAAW,CAAC;AAAES,IAAAA,KAAK,EAAEL,KAAK,CAACK,KAAN,CAAYE;AAArB,GAAD,EAA6BH,QAA7B,EAAuC;AAC1EC,IAAAA,KAAK,EAAEL,KAAK,CAACK,KAAN,CAAYG;AADuD,GAAvC,CAArC;AAGA,SAAO;AACLN,IAAAA,IAAI,EACFF,KAAK,CAACK,KAAN,CAAYG,QAAZ,CACER,KAAK,CAACS,KAAN,CAAYD,QAAZ,CAAqBP,QAAQ,CAACS,MAA9B,EAAsCC,UAAtC,IACEX,KAAK,CAACY,OAAN,CAAcC,IAAd,CAAmBJ,KAAnB,CAAyBR,QAAQ,CAACS,MAAlC,EAA0CC,UAF9C,CAFG;AAMLG,IAAAA,IAAI,EACFd,KAAK,CAACS,KAAN,CAAYD,QAAZ,CAAqBP,QAAQ,CAACS,MAA9B,KACAV,KAAK,CAACY,OAAN,CAAcC,IAAd,CAAmBJ,KAAnB,CAAyBR,QAAQ,CAACS,MAAlC,CARG;AASLL,IAAAA,KAAK,EAAEC,iBAAiB,CAACD;AATpB,GAAP;AAWD,CAjBD;;AAkBA,MAAMU,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLC,IAAAA,gBAAgB,CAACP,MAAD,EAASQ,MAAT,EAAiB;AAC/BF,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAE,WADC;AAEPC,QAAAA,OAAO,EAAE;AAAEF,UAAAA,MAAF;AAAUR,UAAAA;AAAV;AAFF,OAAD,CAAR;AAID;;AANI,GAAP;AAQD,CATD;;AAWA,eAAef,OAAO,CACpBI,eADoB,EAEpBgB,kBAFoB,CAAP,CAGbjB,cAHa,CAAf","sourcesContent":["import { connect } from 'react-redux';\nimport { denormalize, schema } from 'normalizr';\nimport CardAssignment from '../components/CardAssignment';\n\nconst mapStateToProps = (state, ownProps) => {\n  const user = new schema.Entity('users');\n  const mySchema = { users: [user] };\n  const denormalizedUsers = denormalize({ users: state.users.ids }, mySchema, {\n    users: state.users.entities,\n  });\n  return {\n    user:\n      state.users.entities[\n        state.cards.entities[ownProps.cardId].assignedTo ||\n          state.backlog.list.cards[ownProps.cardId].assignedTo\n      ],\n    card:\n      state.cards.entities[ownProps.cardId] ||\n      state.backlog.list.cards[ownProps.cardId],\n    users: denormalizedUsers.users,\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    assignCardToUser(cardId, userId) {\n      dispatch({\n        type: 'MOVE_CARD',\n        payload: { userId, cardId },\n      });\n    },\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(CardAssignment);\n"]},"metadata":{},"sourceType":"module"}